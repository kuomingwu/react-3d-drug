{"version":3,"sources":["logo.svg","utils.js","Stacy.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getMouseDegrees","x","y","degreeLimit","dx","dy","w","window","innerWidth","innerHeight","moveJoint","mouse","joint","degrees","current","rotation","xD","lerp","yD","THREE","degToRad","Model","props","group","useRef","useLoader","GLTFLoader","nodes","animations","texture","actions","useState","mixer","useFrame","state","delta","update","useEffect","idle","clipAction","play","forEach","clip","uncacheClip","mixamorigNeck","mixamorigSpine","ref","dispose","Math","PI","scale","object","geometry","skeleton","attach","map","map-flipY","skinning","Plane","receiveShadow","args","color","transparent","opacity","App","d","onMouseMove","e","clientX","clientY","getMousePos","shadowMap","pixelRatio","devicePixelRatio","camera","position","skyColor","groundColor","intensity","shadow-camera-left","shadow-camera-bottom","shadow-camera-right","shadow-camera-top","shadow-camera-near","shadow-camera-far","castShadow","fallback","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4b33892d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function getMousePos(e) {\n  return { x: e.clientX, y: e.clientY }\n}\nexport function getMouseDegrees(x, y, degreeLimit) {\n  let dx = 0,\n    dy = 0,\n    xdiff,\n    xPercentage,\n    ydiff,\n    yPercentage\n\n  let w = { x: window.innerWidth, y: window.innerHeight }\n\n  // Left (Rotates neck left between 0 and -degreeLimit)\n  // 1. If cursor is in the left half of screen\n  if (x <= w.x / 2) {\n    // 2. Get the difference between middle of screen and cursor position\n    xdiff = w.x / 2 - x\n    // 3. Find the percentage of that difference (percentage toward edge of screen)\n    xPercentage = (xdiff / (w.x / 2)) * 100\n    // 4. Convert that to a percentage of the maximum rotation we allow for the neck\n    dx = ((degreeLimit * xPercentage) / 100) * -1\n  }\n\n  // Right (Rotates neck right between 0 and degreeLimit)\n  if (x >= w.x / 2) {\n    xdiff = x - w.x / 2\n    xPercentage = (xdiff / (w.x / 2)) * 100\n    dx = (degreeLimit * xPercentage) / 100\n  }\n  // Up (Rotates neck up between 0 and -degreeLimit)\n  if (y <= w.y / 2) {\n    ydiff = w.y / 2 - y\n    yPercentage = (ydiff / (w.y / 2)) * 100\n    // Note that I cut degreeLimit in half when she looks up\n    dy = ((degreeLimit * 0.5 * yPercentage) / 100) * -1\n  }\n  // Down (Rotates neck down between 0 and degreeLimit)\n  if (y >= w.y / 2) {\n    ydiff = y - w.y / 2\n    yPercentage = (ydiff / (w.y / 2)) * 100\n    dy = (degreeLimit * yPercentage) / 100\n  }\n  return { x: dx, y: dy }\n}\n","// Auto-generated by https://github.com/react-spring/gltfjsx\n\nimport * as THREE from \"three\"\nimport React, { useEffect, useRef, useState } from \"react\"\nimport { useLoader, useFrame } from \"react-three-fiber\"\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\nimport lerp from \"lerp\"\nimport { getMouseDegrees } from \"./utils\"\n\nfunction moveJoint(mouse, joint, degreeLimit = 40) {\n  let degrees = getMouseDegrees(mouse.current.x, mouse.current.y, degreeLimit)\n  joint.rotation.xD = lerp(joint.rotation.xD || 0, degrees.y, 0.1)\n  joint.rotation.yD = lerp(joint.rotation.yD || 0, degrees.x, 0.1)\n  joint.rotation.x = THREE.Math.degToRad(joint.rotation.xD)\n  joint.rotation.y = THREE.Math.degToRad(joint.rotation.yD)\n}\n\nexport default function Model({ mouse, ...props }) {\n  const group = useRef()\n  const { nodes, animations } = useLoader(GLTFLoader, `/react-3d-drug/stacy.glb`)\n  const texture = useLoader(THREE.TextureLoader, `/react-3d-drug/stacy.jpg`)\n\n  const actions = useRef()\n  const [mixer] = useState(() => new THREE.AnimationMixer())\n  useFrame((state, delta) => mixer.update(delta))\n  useEffect(() => {\n    actions.current = { idle: mixer.clipAction(animations[8], group.current) }\n    actions.current.idle.play()\n    return () => animations.forEach(clip => mixer.uncacheClip(clip))\n  }, [])\n\n  useFrame((state, delta) => {\n    mixer.update(delta)\n    moveJoint(mouse, nodes.mixamorigNeck)\n    moveJoint(mouse, nodes.mixamorigSpine)\n  })\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group rotation={[Math.PI / 2, 0, 0]} scale={[0.01, 0.01, 0.01]}>\n        <primitive object={nodes[\"mixamorigHips\"]} />\n        <skinnedMesh geometry={nodes[\"stacy\"].geometry} skeleton={nodes[\"stacy\"].skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={[100, 100, 100]}>\n          <meshPhongMaterial attach=\"material\" map={texture} map-flipY={false} skinning />\n        </skinnedMesh>\n      </group>\n    </group>\n  )\n}\n","import React , { Suspense, useRef }  from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Canvas } from \"react-three-fiber\"\nimport Stacy from \"./Stacy\"\nimport { getMousePos } from \"./utils\"\nimport \"./styles.css\"\nimport { ARCanvas } from 'react-xr'\nfunction Plane({ ...props }) {\n  return (\n    <mesh {...props} receiveShadow>\n      <planeGeometry attach=\"geometry\" args={[5000, 5000, 1, 1]} />\n      <meshLambertMaterial attach=\"material\" color=\"#9b9b9b\" transparent opacity={0.2} />\n    </mesh>\n  )\n}\n\nfunction App() {\n  const d = 8.25\n  const mouse = useRef({ x: 0, y: 0 })\n  return (\n\n    <ARCanvas onMouseMove={e => (mouse.current = getMousePos(e))} shadowMap pixelRatio={window.devicePixelRatio} camera={{ position: [0, -3, 18] }}>\n      <fog attach=\"fog\" args={[0xdfdfdf, 35, 65]} />\n      <hemisphereLight skyColor={\"black\"} groundColor={0xffffff} intensity={0.68} position={[0, 50, 0]} />\n      <directionalLight\n        position={[-8, 12, 8]}\n        shadow-camera-left={d * -1}\n        shadow-camera-bottom={d * -1}\n        shadow-camera-right={d}\n        shadow-camera-top={d}\n        shadow-camera-near={0.1}\n        shadow-camera-far={1500}\n        castShadow\n      />\n      <mesh position={[0, -3, -10]}>\n        \n        <meshBasicMaterial attach=\"material\" color=\"lightpink\" />\n      </mesh>\n      <Plane rotation={[-0.5 * Math.PI, 0, 0]} position={[0, -11, 0]} />\n      <Suspense fallback={null}>\n        <Stacy mouse={mouse} position={[0, -11, 0]} scale={[7, 7, 7]} />\n      </Suspense>\n    </ARCanvas>\n \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}